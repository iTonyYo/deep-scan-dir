"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}var fs=require("fs"),path=_interopDefault(require("path")),eachLimit=_interopDefault(require("async/eachLimit")),arrify=_interopDefault(require("arrify"));class Collection{constructor(){return{list:[],add:function(item){this.list.push(item)},getAll:function(){return this.list}}}}class Storer{constructor(){return{files:new Collection,dirs:new Collection}}}function everyImpl(name,regexrs){return!regexrs.every(RegExp=>!RegExp.test(name))}async function traversalFolder({from:from,exclude:exclude,storer:storer}){const root=fs.readdirSync(from,{withFileTypes:!0});await eachLimit(root,8,async content=>{if(content.isDirectory()){if(everyImpl(content.name,exclude.dir))return;return storer.dirs.add(path.join(from,content.name)),void await traversalFolder({from:path.join(from,content.name),exclude:exclude,storer:storer})}everyImpl(content.name,exclude.file)||storer.files.add(path.join(from,content.name))})}const deepmerge=require("deepmerge");function getExclusions(iptExclude){const nativeExclusions=deepmerge({dir:[],file:[]},iptExclude);return{dir:getDirExclusionRegExps(arrify(nativeExclusions.dir)),file:getFileExclusionRegExps(arrify(nativeExclusions.file))}}function getDirExclusionRegExps(dirExclusions){return dirExclusions.map(pat=>new RegExp(pat))}function getFileExclusionRegExps(fileExclusions){return fileExclusions.map(pat=>new RegExp(pat))}async function main({from:from=".",exclude:exclude={}}){const storer=new Storer;return await traversalFolder({from:from,exclude:getExclusions(exclude),storer:storer}),{files:storer.files.getAll(),dirs:storer.dirs.getAll()}}function traversalFolderSync({from:from,exclude:exclude,storer:storer}){fs.readdirSync(from,{withFileTypes:!0}).forEach(content=>{if(content.isDirectory()){if(everyImpl(content.name,exclude.dir))return;return storer.dirs.add(path.join(from,content.name)),void traversalFolderSync({from:path.join(from,content.name),exclude:exclude,storer:storer})}everyImpl(content.name,exclude.file)||storer.files.add(path.join(from,content.name))})}function main$1({from:from=".",exclude:exclude={}}){const storer=new Storer;return traversalFolderSync({from:from,exclude:getExclusions(exclude),storer:storer}),{files:storer.files.getAll(),dirs:storer.dirs.getAll()}}var index={deepScanDir:main,deepScanDirSync:main$1};module.exports=index;